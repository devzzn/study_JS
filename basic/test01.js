/*
    변수 호이스팅 (Variable Hoisting)
    
    var 키워드를 사용하여 선언한 변수는 중복 선언이 가능하기 때문에 밑의 콛는 문법적 문제가 없다.
    아래에서 변수 foo는 아직 선언하지 않았으므로 오류가 발생할 것으로 예상되지만 콘솔에는 undefined가 출력된다.
    이것은 자바스크립트 특징으로 모든 선언문은 호이스팅(Hoisting) 된다.

    호이스팅이란 var 선언문이나 function 선언문 등 모든 선언문이 해당 Scope의 선두로 옮겨진 것처럼 동작하는 특성이다.
    즉 자바스크립트는 모든 선언문(var, let, const, function, function*, class)이 선언 되기 이전에 참조 가능하다.

    변수는 3단계에 걸쳐 생성 된다.
    선언 단계 : 변수 객체에 변수를 등록. 이 변수 객체는 스코프가 참조하는 대상이 된다.
    초기화 단계 : 변수 객체에 등록된 변수를 메모리에 할당. 이 단계에서 변수는 undefined로 초기화 된다.
    할당 단계 : undefined로 초기화된 변수에 실제값을 할당.

    자바스크립트의 변수는 함수 레벨 스코프를 갖는다.
    함수 레벨 스코프 : 함수 내에서 선언된 변수는 함수 내에서만 유효하며 함수 외부에서는 참조할 수 없다.
    즉, 함수 내부에서 선언한 변수는 지역 변수이며 함수 외부에서 선언한 변수는 모두 전역 변수이다.

*/
console.log(foo); // 1. undefined
var foo = 123;
console.log(foo); // 2. 123
{
  var foo = 456;
}
console.log(foo); // 3. 456
/*
    1이 실행되기 이전에 var foo = 123; 이 호이스팅 되어 1구문 앞에 var foo;가 옮겨진다.
    (실제 변수 선언이 코드 레벨로 옮겨진 것은 아니고 변수 객체에 등록되고 초기화 된 것)
    하지만 변수 선언 단계와 초기화 단계가 할당 단계와 분리되어 진행되기 때문에 이 단계에서는 foo에는 undefined가 할당 되어 있다.
*/