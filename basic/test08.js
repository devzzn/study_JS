function foo() {
    x = 10;
  }
  
  console.log(x); // ?
/*
    foo 함수 내에서 선언하지 않은 변수 x에 값 10을 할당하였다. 
    이때 변수 x를 찾아야 x에 값을 할당할 수 있기 때문에 자바스크립트 엔진은 변수 x가 어디에서 선언되었는지 스코프 체인을 통해 검색하기 시작한다.

    자바스크립트 엔진은 먼저 foo 함수의 스코프에서 변수 x의 선언을 검색한다. 
    foo 함수의 스코프에는 변수 x의 선언이 없으므로 검색에 실패할 것이고, 
    자바스크립트 엔진은 변수 x를 검색하기 위해 foo 함수 컨텍스트의 
    상위 스코프(위 예제의 경우, 전역 스코프)에서 변수 x의 선언을 검색한다.

    전역 스코프에도 변수 x의 선언이 존재하지 않기 때문에 ReferenceError를 throw할 것 같지만 
    자바스크립트 엔진은 암묵적으로 전역 객체에 프로퍼티 x를 동적 생성한다. 결국 식별자 x는 전역 변수가 된다. 이렇게 전역 변수가 된 변수를 암묵적 전역 변수(implicit global)라 한다.

    개발자의 의도와는 상관없이 자바스크립트 엔진이 생성한 암묵적 전역 변수는 오류를 발생시키는 원인이 될 가능성이 크다. 
    따라서 반드시 var, let, const 키워드를 사용하여 변수를 선언한 다음 변수를 사용해야 한다.
*/
/*
    이를 지원하기 위해 ES5부터 strict mode가 추가되었다. strict mode는 자바스크립트 언어의
    문법을 보다 엄격히 적용하여 기존에는 무시되던 오류를 발생시킬 가능성이 높거나 자바스크립트 엔진의 최적화 작업에 문제를 일으킬 수 있는 코드에 대해
    명시적인 에러를 발생시킨다.

    strict mode를 적용하려면 전역의 선두 또는 함수 몸체의 선두에 'use strict';를 추가한다.
    전역의 선두에 추가하면 스크립트 전체에 strict mode 가 적용된다.
*/
// 전역에 strict mode의 적용하는 것은 바람직하지 않다!
'use strict';

function foo() {
  x = 10; // ReferenceError: x is not defined
}
foo();

// 함수 단위로 strict mode 적용
function foo() {
    'use strict';
  
    x = 10; // ReferenceError: x is not defined
}
foo();
